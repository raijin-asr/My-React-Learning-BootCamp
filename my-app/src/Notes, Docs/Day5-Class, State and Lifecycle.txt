//State is similar to props, but it is private and fully controlled by the component.

----Converting a Function to a Class
You can convert a function component like Clock to a class in five steps:

1. Create an ES6 class, with the same name, that extends React.Component.
2. Add a single empty method to it called render().
3. Move the body of the function into the render() method.
4. Replace props with this.props in the render() body.
5. Delete the remaining empty function declaration.

    class Clock extends React.Component {
    render() {
        return (
        <div>
            <h1>Hello, world!</h1>
            <h2>It is {this.props.date.toLocaleTimeString()}.</h2>
        </div>
        );
    }
    }

Clock is now defined as a class rather than a function.

The render method will be called each time an update happens, but as long as we render <Clock /> into the same DOM node, only a single instance of the Clock class will be used. This lets us use additional features such as local state and lifecycle methods.

--Adding Local State to a Class
We will move the date from props to state in three steps:

1. Replace this.props.date with this.state.date in the render() method:
    class Clock extends React.Component {
    render() {
        return (
        <div>
            <h1>Hello, world!</h1>
            <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
        );
    }
    }

2. Add a class constructor that assigns the initial this.state:
    class Clock extends React.Component {
    constructor(props) {
        super(props);
        this.state = {date: new Date()};
    }

    render() {
        return (
        <div>
            <h1>Hello, world!</h1>
            <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
        );
    }
    }
Note how we pass props to the base constructor:

    constructor(props) {
        super(props);
        this.state = {date: new Date()};
    }
Class components should always call the base constructor with props.

3. Remove the date prop from the <Clock /> element:
    root.render(<Clock />);

We will later add the timer code back to the component itself.

The result looks like this:

    class Clock extends React.Component {
    constructor(props) {
        super(props);
        this.state = {date: new Date()};
    }

    render() {
        return (
        <div>
            <h1>Hello, world!</h1>
            <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
        );
    }
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<Clock />);

Adding Lifecycle Methods to a Class:-----------
In applications with many components, it’s very important to free up resources taken by the components when they are destroyed.

We want to set up a timer whenever the Clock is rendered to the DOM for the first time. This is called “mounting” in React.

We also want to clear that timer whenever the DOM produced by the Clock is removed. This is called “unmounting” in React.

We can declare special methods on the component class to run some code when a component mounts and unmounts:
lass Clock extends React.Component {
    constructor(props) {
        super(props);
        this.state = {date: new Date()};
    }

    componentDidMount() { <----
    }

    componentWillUnmount() { <------
    }

    render() {
        return (
        <div>
            <h1>Hello, world!</h1>
            <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
        );
    }
    }
These methods are called “lifecycle methods”.

1. The componentDidMount() method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:

    componentDidMount() {
        this.timerID = setInterval(
        () => this.tick(),
        1000
        );
    }

2. We will tear down the timer in the componentWillUnmount() lifecycle method:

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

Finally, we will implement a method called tick() that the Clock component will run every second.

It will use this.setState() to schedule updates to the component local state:

    class Clock extends React.Component {
    constructor(props) { //react calls constructor with props
      super(props);
      this.state = {date: new Date()}; //initial state
    }
  
    componentDidMount() { //mounting
      this.timerID = setInterval(
        () => this.tick(), //calls tick method every second
        1000
      );
    }
  
    componentWillUnmount() { //unmounting
      clearInterval(this.timerID);
    }
  
    tick() { //tick method, called every second, is another lifecycle method
      this.setState({ //setState() schedules an update to a component’s state object
        date: new Date() //knows state has changed, calls render() again
      });
    }
  
    render() { //renders the clock in this.state.date
      return (
        <div>
          <h1>Hello, world!</h1>
          <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
      );
    }
  }
  
  const root3 = ReactDOM.createRoot(document.getElementById('root'));
  root3.render(<Clock />);

//Using State Correctly:--------
There are three things you should know about setState().

1. Do Not Modify State Directly
For example, this will not re-render a component:

// Wrong
    this.state.comment = 'Hello';
    Instead, use setState():

// Correct
    this.setState({comment: 'Hello'});

2. State Updates May Be Asynchronous
React may batch multiple setState() calls into a single update for performance.

Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.

For example, this code may fail to update the counter:

// Wrong
    this.setState({
    counter: this.state.counter + this.props.increment,
    });

To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:

// Correct
    this.setState((state, props) => ({
    counter: state.counter + props.increment
    }));

We used an arrow function above, but it also works with regular functions:

// Correct
    this.setState(function(state, props) {
    return {
        counter: state.counter + props.increment
    };
    });

3. State Updates are Merged
When you call setState(), React merges the object you provide into the current state.

For example, your state may contain several independent variables:

  constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
Then you can update them independently with separate setState() calls:

  componentDidMount() {
    fetchPosts().then(response => {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response => {
      this.setState({
        comments: response.comments
      });
    });
  }
The merging is shallow, so this.setState({comments}) leaves this.state.posts intact, but completely replaces this.state.comments.


--The Data Flows Down:
Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.

This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.

A component may choose to pass its state down as props to its child components:

    <FormattedDate date={this.state.date} />

The FormattedDate component would receive the date in its props and wouldn’t know whether it came from the Clock’s state, from the Clock’s props, or was typed by hand:

    function FormattedDate(props) {
    return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
    }

This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.

If you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.

To show that all components are truly isolated, we can create an App component that renders three <Clock>s:

    function App() {
    return (
        <div>
        <Clock />
        <Clock />
        <Clock />
        </div>
    );
    }

Each Clock sets up its own timer and updates independently.

In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.
